import { QueryClient } from '@tanstack/react-query'
import { FetchFn } from '@zenstackhq/tanstack-query/runtime-v5'
import { HttpStatusCode } from 'axios'
import { fetchAuthControllerRefreshToken } from '@/generated/api/chcnComponents'
import { getCookie, setCookie } from 'cookies-next'
import { logout } from '@/utils/auth'
import { toast } from "@/components/ui/toast";

const queryClient = new QueryClient()
const BASE_URL = process.env.NEXT_PUBLIC_BASE_URL
const AUTH_URL = ['auth/login', 'auth/logout', 'auth/refresh-token']

// C·ªù to√†n c·ª•c ƒë·ªÉ ƒë·∫£m b·∫£o qu·∫£n l√Ω refresh v√† logout hi·ªáu qu·∫£
let isRefreshing = false;
let isLoggingOut = false;
let refreshRetryCount = 0;
const MAX_REFRESH_RETRIES = 3;

// Promise ƒë·ªÉ x·ª≠ l√Ω nhi·ªÅu requests ƒë·ªìng th·ªùi
let refreshTokenPromise: Promise<string | null> | null = null;

// X·ª≠ l√Ω khi status code tr·∫£ v·ªÅ l√† 401 ho·∫∑c 403
const interceptorsResponse = async (status: number, url: string, options?: any) => {
    console.log(`üîÑ [Auth] Nh·∫≠n ƒë∆∞·ª£c status code ${status} t·ª´ URL: ${url}`);
    
    if (
        (status == HttpStatusCode.Unauthorized ||
            status == HttpStatusCode.Forbidden) &&
        AUTH_URL.every((item) => !url.includes(item))
    ) {
        console.log(`üîë [Auth] Ph√°t hi·ªán l·ªói x√°c th·ª±c, URL kh√¥ng ph·∫£i auth URL`);
        console.log(`üö• [Auth] Tr·∫°ng th√°i: isRefreshing=${isRefreshing}, isLoggingOut=${isLoggingOut}, refreshRetryCount=${refreshRetryCount}`);
        
        // N·∫øu ƒëang trong qu√° tr√¨nh ƒëƒÉng xu·∫•t, kh√¥ng l√†m g√¨
        if (isLoggingOut) {
            console.log(`üö´ [Auth] ƒêang ƒëƒÉng xu·∫•t, b·ªè qua refresh token`);
            return;
        }

        try {
            // Ki·ªÉm tra s·ªë l·∫ßn th·ª≠ refresh
            if (refreshRetryCount >= MAX_REFRESH_RETRIES) {
                console.log(`‚ö†Ô∏è [Auth] ƒê√£ v∆∞·ª£t qu√° s·ªë l·∫ßn th·ª≠ (${refreshRetryCount}/${MAX_REFRESH_RETRIES})`);
                throw new Error('ƒê√£ v∆∞·ª£t qu√° s·ªë l·∫ßn th·ª≠ refresh token');
            }

            // N·∫øu ƒëang refresh, s·ª≠ d·ª•ng promise hi·ªán t·∫°i
            if (!refreshTokenPromise) {
                console.log(`üÜï [Auth] T·∫°o m·ªõi Promise refresh token`);
                // T·∫°o promise m·ªõi ch·ªâ khi ch∆∞a c√≥
                refreshTokenPromise = refreshToken();
            } else {
                console.log(`‚è≥ [Auth] ƒêang ch·ªù Promise refresh token hi·ªán t·∫°i`);
            }

            // ƒê·ª£i k·∫øt qu·∫£ refresh token
            console.log(`‚åõ [Auth] ƒêang ƒë·ª£i k·∫øt qu·∫£ refresh token...`);
            const newToken = await refreshTokenPromise;
            console.log(`‚úÖ [Auth] ƒê√£ nh·∫≠n ƒë∆∞·ª£c k·∫øt qu·∫£ refresh token: ${newToken ? 'Th√†nh c√¥ng' : 'Th·∫•t b·∫°i'}`);
            
            // N·∫øu refresh th√†nh c√¥ng v√† c√≥ options, th·ª≠ l·∫°i request
            if (newToken && options) {
                console.log(`üîÑ [Auth] Th·ª≠ l·∫°i request v·ªõi token m·ªõi`);
                // C·∫≠p nh·∫≠t token trong options v√† th·ª≠ l·∫°i request
                const retryOptions = {
                    ...options,
                    headers: {
                        ...options.headers,
                        Authorization: `Bearer ${newToken}`,
                    }
                };
                console.log(`üîÑ [Auth] Headers m·ªõi:`, retryOptions.headers);
                
                return fetch(url, retryOptions);
            }
            
            // N·∫øu kh√¥ng c√≥ token m·ªõi, x·ª≠ l√Ω l·ªói
            if (!newToken) {
                console.log(`‚ùå [Auth] Kh√¥ng th·ªÉ l·∫•y token m·ªõi`);
                throw new Error('Kh√¥ng th·ªÉ refresh token');
            }
        } catch (error) {
            console.error(`‚ùå [Auth] L·ªói refresh token:`, error);
            
            // X·ª≠ l√Ω l·ªói v√† ƒëƒÉng xu·∫•t n·∫øu c·∫ßn
            handleAuthError();
        }
    } else if (status === HttpStatusCode.Unauthorized || status === HttpStatusCode.Forbidden) {
        console.log(`‚ÑπÔ∏è [Auth] B·ªè qua x·ª≠ l√Ω cho URL auth: ${url}`);
    }
}

// H√†m ri√™ng ƒë·ªÉ refresh token
const refreshToken = async (): Promise<string | null> => {
    try {
        // ƒê√°nh d·∫•u ƒëang refresh v√† tƒÉng s·ªë l·∫ßn th·ª≠
        isRefreshing = true;
        refreshRetryCount++;

        console.log(`üîÑ [RefreshToken] B·∫Øt ƒë·∫ßu refresh l·∫ßn ${refreshRetryCount}/${MAX_REFRESH_RETRIES}`);

        const refreshToken = String(getCookie('refreshToken')) || '';
        if (!refreshToken) {
            console.log(`‚ùå [RefreshToken] Kh√¥ng t√¨m th·∫•y refresh token trong cookie`);
            throw new Error('Refresh token kh√¥ng t·ªìn t·∫°i');
        }
        
        console.log(`üì§ [RefreshToken] G·ª≠i request refresh token ƒë·∫øn server`);
        const resRefresh = await fetchAuthControllerRefreshToken({
            body: {
                refreshToken,
            },
        });
        
        console.log(`üì• [RefreshToken] Ph·∫£n h·ªìi t·ª´ server:`, resRefresh);
        
        if (resRefresh.accessToken) {
            // Refresh th√†nh c√¥ng
            setCookie('accessToken', resRefresh.accessToken);
            console.log(`‚úÖ [RefreshToken] ƒê√£ l∆∞u access token m·ªõi v√†o cookie`);
            console.log('üì¶ [RefreshToken] Access token m·ªõi:', resRefresh.refreshToken);
            setCookie('refreshToken', resRefresh.refreshToken);
            // ƒê·∫∑t l·∫°i c·ªù v√† b·ªô ƒë·∫øm
            isRefreshing = false;
            refreshRetryCount = 0;
            
            // ƒê·∫∑t l·∫°i promise
            setTimeout(() => {
                refreshTokenPromise = null;
                console.log(`üßπ [RefreshToken] ƒê√£ x√≥a Promise ƒë·ªÉ s·∫µn s√†ng cho l·∫ßn sau`);
            }, 100);
            
            return resRefresh.accessToken;
        } else {
            console.log(`‚ö†Ô∏è [RefreshToken] Server tr·∫£ v·ªÅ nh∆∞ng kh√¥ng c√≥ access token`);
            throw new Error('Access token kh√¥ng h·ª£p l·ªá');
        }
    } catch (error) {
        console.error(`‚ùå [RefreshToken] L·ªói:`, error);
        
        // ƒê·∫∑t l·∫°i promise ƒë·ªÉ l·∫ßn sau c√≥ th·ªÉ th·ª≠ l·∫°i
        refreshTokenPromise = null;
        isRefreshing = false;
        
        // QuƒÉng l·ªói ƒë·ªÉ x·ª≠ l√Ω ·ªü tr√™n
        throw error;
    }
};

// H√†m x·ª≠ l√Ω l·ªói x√°c th·ª±c
const handleAuthError = () => {
    console.log(`üö® [AuthError] X·ª≠ l√Ω l·ªói x√°c th·ª±c, refreshRetryCount=${refreshRetryCount}`);
    
    // Ch·ªâ ƒëƒÉng xu·∫•t n·∫øu ƒë√£ h·∫øt l∆∞·ª£t th·ª≠
    if (refreshRetryCount >= MAX_REFRESH_RETRIES) {
        console.log(`üîë [AuthError] ƒê√£ v∆∞·ª£t qu√° s·ªë l·∫ßn th·ª≠, chu·∫©n b·ªã ƒëƒÉng xu·∫•t`);
        
        // ƒê·∫∑t l·∫°i c√°c c·ªù v√† b·ªô ƒë·∫øm
        isRefreshing = false;
        refreshRetryCount = 0;
        refreshTokenPromise = null;
        
        // ƒê√°nh d·∫•u ƒëang ƒëƒÉng xu·∫•t ƒë·ªÉ tr√°nh c√°c y√™u c·∫ßu l√†m m·ªõi l·∫°i
        isLoggingOut = true;

        // Hi·ªÉn th·ªã toast v√† ƒë·ª£i n√≥ bi·∫øn m·∫•t
        if (typeof window !== 'undefined') {
            console.log(`üîî [AuthError] Hi·ªÉn th·ªã th√¥ng b√°o cho ng∆∞·ªùi d√πng`);
            
            toast.error({
                title: "Phi√™n l√†m vi·ªác h·∫øt h·∫°n",
                description: "Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i ƒë·ªÉ ti·∫øp t·ª•c.",
                position: "top-center",
                autoClose: 3000,
                onClose: () => {
                    console.log(`üëã [AuthError] Toast ƒë√£ ƒë√≥ng, ti·∫øn h√†nh ƒëƒÉng xu·∫•t`);
                    // ƒêƒÉng xu·∫•t sau khi toast bi·∫øn m·∫•t
                    logout().then(() => {
                        console.log(`üö™ [AuthError] ƒêƒÉng xu·∫•t th√†nh c√¥ng, chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang ƒëƒÉng nh·∫≠p`);
                        window.location.href = '/auth/login';
                        isLoggingOut = false;
                    });
                }
            });

            // Fallback n·∫øu onClose kh√¥ng ho·∫°t ƒë·ªông
            setTimeout(() => {
                if (isLoggingOut) {
                    console.log(`‚è±Ô∏è [AuthError] Fallback timeout k√≠ch ho·∫°t`);
                    logout().then(() => {
                        window.location.href = '/auth/login';
                        isLoggingOut = false;
                    });
                }
            }, 3500);
        }
    } else {
        console.log(`‚ö†Ô∏è [AuthError] V·∫´n c√≤n c∆° h·ªôi th·ª≠ l·∫°i (${refreshRetryCount}/${MAX_REFRESH_RETRIES})`);
    }
};

const fetchInstance: FetchFn = (url, options) => {
    const accessToken = getCookie('accessToken') as string
    options = options ?? {}
    options.headers = {
        ...options.headers,
        Authorization: `Bearer ${accessToken}`,
    }
    
    console.log(`üîÑ [Fetch] G·ª≠i request ƒë·∫øn: ${url}`);
    
    return fetch(url, options).then(async (res) => {
        console.log(`üì• [Fetch] Nh·∫≠n response t·ª´ ${url}, status: ${res.status}`);
        
        if (!res.ok) {
            console.log(`‚ö†Ô∏è [Fetch] Response kh√¥ng OK, status: ${res.status}`);
            // X·ª≠ l√Ω l·ªói x√°c th·ª±c
            const result = await interceptorsResponse(res.status, res.url, options);
            console.log(`üîÑ [Fetch] K·∫øt qu·∫£ t·ª´ interceptorsResponse:`, result);
            // N·∫øu c√≥ k·∫øt qu·∫£ t·ª´ vi·ªác th·ª≠ l·∫°i, tr·∫£ v·ªÅ k·∫øt qu·∫£ ƒë√≥
            if (result) {
                console.log(`‚úÖ [Fetch] ƒê√£ th·ª≠ l·∫°i request th√†nh c√¥ng`);
                return result;
            }
            console.log(`‚û°Ô∏è [Fetch] Tr·∫£ v·ªÅ response ban ƒë·∫ßu v√¨ kh√¥ng th·ªÉ th·ª≠ l·∫°i`);
        }
        return res
    })
}
export { BASE_URL, fetchInstance, queryClient, interceptorsResponse }
