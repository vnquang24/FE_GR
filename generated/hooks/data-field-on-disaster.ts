/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, DataFieldOnDisaster } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateDataFieldOnDisaster(options?: Omit<(UseMutationOptions<(DataFieldOnDisaster | undefined), DefaultError, Prisma.DataFieldOnDisasterCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.DataFieldOnDisasterCreateArgs, DefaultError, DataFieldOnDisaster, true>('DataFieldOnDisaster', 'POST', `${endpoint}/dataFieldOnDisaster/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.DataFieldOnDisasterCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.DataFieldOnDisasterCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, DataFieldOnDisaster, Prisma.DataFieldOnDisasterGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.DataFieldOnDisasterCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, DataFieldOnDisaster, Prisma.DataFieldOnDisasterGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyDataFieldOnDisaster(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.DataFieldOnDisasterCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.DataFieldOnDisasterCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('DataFieldOnDisaster', 'POST', `${endpoint}/dataFieldOnDisaster/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.DataFieldOnDisasterCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.DataFieldOnDisasterCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.DataFieldOnDisasterCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyDataFieldOnDisaster<TArgs extends Prisma.DataFieldOnDisasterFindManyArgs, TQueryFnData = Array<Prisma.DataFieldOnDisasterGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.DataFieldOnDisasterFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('DataFieldOnDisaster', `${endpoint}/dataFieldOnDisaster/findMany`, args, options, fetch);
}

export function useInfiniteFindManyDataFieldOnDisaster<TArgs extends Prisma.DataFieldOnDisasterFindManyArgs, TQueryFnData = Array<Prisma.DataFieldOnDisasterGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.DataFieldOnDisasterFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('DataFieldOnDisaster', `${endpoint}/dataFieldOnDisaster/findMany`, args, options, fetch);
}

export function useSuspenseFindManyDataFieldOnDisaster<TArgs extends Prisma.DataFieldOnDisasterFindManyArgs, TQueryFnData = Array<Prisma.DataFieldOnDisasterGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.DataFieldOnDisasterFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('DataFieldOnDisaster', `${endpoint}/dataFieldOnDisaster/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyDataFieldOnDisaster<TArgs extends Prisma.DataFieldOnDisasterFindManyArgs, TQueryFnData = Array<Prisma.DataFieldOnDisasterGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.DataFieldOnDisasterFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('DataFieldOnDisaster', `${endpoint}/dataFieldOnDisaster/findMany`, args, options, fetch);
}

export function useFindUniqueDataFieldOnDisaster<TArgs extends Prisma.DataFieldOnDisasterFindUniqueArgs, TQueryFnData = Prisma.DataFieldOnDisasterGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.DataFieldOnDisasterFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('DataFieldOnDisaster', `${endpoint}/dataFieldOnDisaster/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueDataFieldOnDisaster<TArgs extends Prisma.DataFieldOnDisasterFindUniqueArgs, TQueryFnData = Prisma.DataFieldOnDisasterGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.DataFieldOnDisasterFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('DataFieldOnDisaster', `${endpoint}/dataFieldOnDisaster/findUnique`, args, options, fetch);
}

export function useFindFirstDataFieldOnDisaster<TArgs extends Prisma.DataFieldOnDisasterFindFirstArgs, TQueryFnData = Prisma.DataFieldOnDisasterGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.DataFieldOnDisasterFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('DataFieldOnDisaster', `${endpoint}/dataFieldOnDisaster/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstDataFieldOnDisaster<TArgs extends Prisma.DataFieldOnDisasterFindFirstArgs, TQueryFnData = Prisma.DataFieldOnDisasterGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.DataFieldOnDisasterFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('DataFieldOnDisaster', `${endpoint}/dataFieldOnDisaster/findFirst`, args, options, fetch);
}

export function useUpdateDataFieldOnDisaster(options?: Omit<(UseMutationOptions<(DataFieldOnDisaster | undefined), DefaultError, Prisma.DataFieldOnDisasterUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.DataFieldOnDisasterUpdateArgs, DefaultError, DataFieldOnDisaster, true>('DataFieldOnDisaster', 'PUT', `${endpoint}/dataFieldOnDisaster/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.DataFieldOnDisasterUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.DataFieldOnDisasterUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, DataFieldOnDisaster, Prisma.DataFieldOnDisasterGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.DataFieldOnDisasterUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, DataFieldOnDisaster, Prisma.DataFieldOnDisasterGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyDataFieldOnDisaster(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.DataFieldOnDisasterUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.DataFieldOnDisasterUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('DataFieldOnDisaster', 'PUT', `${endpoint}/dataFieldOnDisaster/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.DataFieldOnDisasterUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.DataFieldOnDisasterUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.DataFieldOnDisasterUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertDataFieldOnDisaster(options?: Omit<(UseMutationOptions<(DataFieldOnDisaster | undefined), DefaultError, Prisma.DataFieldOnDisasterUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.DataFieldOnDisasterUpsertArgs, DefaultError, DataFieldOnDisaster, true>('DataFieldOnDisaster', 'POST', `${endpoint}/dataFieldOnDisaster/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.DataFieldOnDisasterUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.DataFieldOnDisasterUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, DataFieldOnDisaster, Prisma.DataFieldOnDisasterGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.DataFieldOnDisasterUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, DataFieldOnDisaster, Prisma.DataFieldOnDisasterGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteDataFieldOnDisaster(options?: Omit<(UseMutationOptions<(DataFieldOnDisaster | undefined), DefaultError, Prisma.DataFieldOnDisasterDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.DataFieldOnDisasterDeleteArgs, DefaultError, DataFieldOnDisaster, true>('DataFieldOnDisaster', 'DELETE', `${endpoint}/dataFieldOnDisaster/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.DataFieldOnDisasterDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.DataFieldOnDisasterDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, DataFieldOnDisaster, Prisma.DataFieldOnDisasterGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.DataFieldOnDisasterDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, DataFieldOnDisaster, Prisma.DataFieldOnDisasterGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyDataFieldOnDisaster(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.DataFieldOnDisasterDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.DataFieldOnDisasterDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('DataFieldOnDisaster', 'DELETE', `${endpoint}/dataFieldOnDisaster/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.DataFieldOnDisasterDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.DataFieldOnDisasterDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.DataFieldOnDisasterDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateDataFieldOnDisaster<TArgs extends Prisma.DataFieldOnDisasterAggregateArgs, TQueryFnData = Prisma.GetDataFieldOnDisasterAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.DataFieldOnDisasterAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('DataFieldOnDisaster', `${endpoint}/dataFieldOnDisaster/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateDataFieldOnDisaster<TArgs extends Prisma.DataFieldOnDisasterAggregateArgs, TQueryFnData = Prisma.GetDataFieldOnDisasterAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.DataFieldOnDisasterAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('DataFieldOnDisaster', `${endpoint}/dataFieldOnDisaster/aggregate`, args, options, fetch);
}

export function useGroupByDataFieldOnDisaster<TArgs extends Prisma.DataFieldOnDisasterGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.DataFieldOnDisasterGroupByArgs['orderBy'] } : { orderBy?: Prisma.DataFieldOnDisasterGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.DataFieldOnDisasterGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.DataFieldOnDisasterGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.DataFieldOnDisasterGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.DataFieldOnDisasterGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.DataFieldOnDisasterGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('DataFieldOnDisaster', `${endpoint}/dataFieldOnDisaster/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByDataFieldOnDisaster<TArgs extends Prisma.DataFieldOnDisasterGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.DataFieldOnDisasterGroupByArgs['orderBy'] } : { orderBy?: Prisma.DataFieldOnDisasterGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.DataFieldOnDisasterGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.DataFieldOnDisasterGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.DataFieldOnDisasterGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.DataFieldOnDisasterGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.DataFieldOnDisasterGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('DataFieldOnDisaster', `${endpoint}/dataFieldOnDisaster/groupBy`, args, options, fetch);
}

export function useCountDataFieldOnDisaster<TArgs extends Prisma.DataFieldOnDisasterCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.DataFieldOnDisasterCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.DataFieldOnDisasterCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('DataFieldOnDisaster', `${endpoint}/dataFieldOnDisaster/count`, args, options, fetch);
}

export function useSuspenseCountDataFieldOnDisaster<TArgs extends Prisma.DataFieldOnDisasterCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.DataFieldOnDisasterCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.DataFieldOnDisasterCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('DataFieldOnDisaster', `${endpoint}/dataFieldOnDisaster/count`, args, options, fetch);
}

export function useCheckDataFieldOnDisaster<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; description?: string; disasterId?: string; dataFieldId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('DataFieldOnDisaster', `${endpoint}/dataFieldOnDisaster/check`, args, options, fetch);
}
