/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, PriorityLevel } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreatePriorityLevel(options?: Omit<(UseMutationOptions<(PriorityLevel | undefined), DefaultError, Prisma.PriorityLevelCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PriorityLevelCreateArgs, DefaultError, PriorityLevel, true>('PriorityLevel', 'POST', `${endpoint}/priorityLevel/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PriorityLevelCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.PriorityLevelCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, PriorityLevel, Prisma.PriorityLevelGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PriorityLevelCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, PriorityLevel, Prisma.PriorityLevelGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyPriorityLevel(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.PriorityLevelCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PriorityLevelCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('PriorityLevel', 'POST', `${endpoint}/priorityLevel/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PriorityLevelCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.PriorityLevelCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.PriorityLevelCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyPriorityLevel<TArgs extends Prisma.PriorityLevelFindManyArgs, TQueryFnData = Array<Prisma.PriorityLevelGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PriorityLevelFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PriorityLevel', `${endpoint}/priorityLevel/findMany`, args, options, fetch);
}

export function useInfiniteFindManyPriorityLevel<TArgs extends Prisma.PriorityLevelFindManyArgs, TQueryFnData = Array<Prisma.PriorityLevelGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PriorityLevelFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('PriorityLevel', `${endpoint}/priorityLevel/findMany`, args, options, fetch);
}

export function useSuspenseFindManyPriorityLevel<TArgs extends Prisma.PriorityLevelFindManyArgs, TQueryFnData = Array<Prisma.PriorityLevelGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PriorityLevelFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('PriorityLevel', `${endpoint}/priorityLevel/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyPriorityLevel<TArgs extends Prisma.PriorityLevelFindManyArgs, TQueryFnData = Array<Prisma.PriorityLevelGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PriorityLevelFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('PriorityLevel', `${endpoint}/priorityLevel/findMany`, args, options, fetch);
}

export function useFindUniquePriorityLevel<TArgs extends Prisma.PriorityLevelFindUniqueArgs, TQueryFnData = Prisma.PriorityLevelGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.PriorityLevelFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PriorityLevel', `${endpoint}/priorityLevel/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniquePriorityLevel<TArgs extends Prisma.PriorityLevelFindUniqueArgs, TQueryFnData = Prisma.PriorityLevelGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.PriorityLevelFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('PriorityLevel', `${endpoint}/priorityLevel/findUnique`, args, options, fetch);
}

export function useFindFirstPriorityLevel<TArgs extends Prisma.PriorityLevelFindFirstArgs, TQueryFnData = Prisma.PriorityLevelGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PriorityLevelFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PriorityLevel', `${endpoint}/priorityLevel/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstPriorityLevel<TArgs extends Prisma.PriorityLevelFindFirstArgs, TQueryFnData = Prisma.PriorityLevelGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PriorityLevelFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('PriorityLevel', `${endpoint}/priorityLevel/findFirst`, args, options, fetch);
}

export function useUpdatePriorityLevel(options?: Omit<(UseMutationOptions<(PriorityLevel | undefined), DefaultError, Prisma.PriorityLevelUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PriorityLevelUpdateArgs, DefaultError, PriorityLevel, true>('PriorityLevel', 'PUT', `${endpoint}/priorityLevel/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PriorityLevelUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.PriorityLevelUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, PriorityLevel, Prisma.PriorityLevelGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PriorityLevelUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, PriorityLevel, Prisma.PriorityLevelGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyPriorityLevel(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.PriorityLevelUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PriorityLevelUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('PriorityLevel', 'PUT', `${endpoint}/priorityLevel/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PriorityLevelUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.PriorityLevelUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.PriorityLevelUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertPriorityLevel(options?: Omit<(UseMutationOptions<(PriorityLevel | undefined), DefaultError, Prisma.PriorityLevelUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PriorityLevelUpsertArgs, DefaultError, PriorityLevel, true>('PriorityLevel', 'POST', `${endpoint}/priorityLevel/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PriorityLevelUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.PriorityLevelUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, PriorityLevel, Prisma.PriorityLevelGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PriorityLevelUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, PriorityLevel, Prisma.PriorityLevelGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeletePriorityLevel(options?: Omit<(UseMutationOptions<(PriorityLevel | undefined), DefaultError, Prisma.PriorityLevelDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PriorityLevelDeleteArgs, DefaultError, PriorityLevel, true>('PriorityLevel', 'DELETE', `${endpoint}/priorityLevel/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PriorityLevelDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.PriorityLevelDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, PriorityLevel, Prisma.PriorityLevelGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PriorityLevelDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, PriorityLevel, Prisma.PriorityLevelGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyPriorityLevel(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.PriorityLevelDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PriorityLevelDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('PriorityLevel', 'DELETE', `${endpoint}/priorityLevel/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PriorityLevelDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.PriorityLevelDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.PriorityLevelDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregatePriorityLevel<TArgs extends Prisma.PriorityLevelAggregateArgs, TQueryFnData = Prisma.GetPriorityLevelAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.PriorityLevelAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PriorityLevel', `${endpoint}/priorityLevel/aggregate`, args, options, fetch);
}

export function useSuspenseAggregatePriorityLevel<TArgs extends Prisma.PriorityLevelAggregateArgs, TQueryFnData = Prisma.GetPriorityLevelAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.PriorityLevelAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('PriorityLevel', `${endpoint}/priorityLevel/aggregate`, args, options, fetch);
}

export function useGroupByPriorityLevel<TArgs extends Prisma.PriorityLevelGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.PriorityLevelGroupByArgs['orderBy'] } : { orderBy?: Prisma.PriorityLevelGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.PriorityLevelGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.PriorityLevelGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.PriorityLevelGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.PriorityLevelGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.PriorityLevelGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PriorityLevel', `${endpoint}/priorityLevel/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByPriorityLevel<TArgs extends Prisma.PriorityLevelGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.PriorityLevelGroupByArgs['orderBy'] } : { orderBy?: Prisma.PriorityLevelGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.PriorityLevelGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.PriorityLevelGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.PriorityLevelGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.PriorityLevelGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.PriorityLevelGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('PriorityLevel', `${endpoint}/priorityLevel/groupBy`, args, options, fetch);
}

export function useCountPriorityLevel<TArgs extends Prisma.PriorityLevelCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.PriorityLevelCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PriorityLevelCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PriorityLevel', `${endpoint}/priorityLevel/count`, args, options, fetch);
}

export function useSuspenseCountPriorityLevel<TArgs extends Prisma.PriorityLevelCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.PriorityLevelCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.PriorityLevelCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('PriorityLevel', `${endpoint}/priorityLevel/count`, args, options, fetch);
}

export function useCheckPriorityLevel<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; description?: string; name?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('PriorityLevel', `${endpoint}/priorityLevel/check`, args, options, fetch);
}
