/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, DisasterType } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateDisasterType(options?: Omit<(UseMutationOptions<(DisasterType | undefined), DefaultError, Prisma.DisasterTypeCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.DisasterTypeCreateArgs, DefaultError, DisasterType, true>('DisasterType', 'POST', `${endpoint}/disasterType/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.DisasterTypeCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.DisasterTypeCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, DisasterType, Prisma.DisasterTypeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.DisasterTypeCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, DisasterType, Prisma.DisasterTypeGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyDisasterType(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.DisasterTypeCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.DisasterTypeCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('DisasterType', 'POST', `${endpoint}/disasterType/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.DisasterTypeCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.DisasterTypeCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.DisasterTypeCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyDisasterType<TArgs extends Prisma.DisasterTypeFindManyArgs, TQueryFnData = Array<Prisma.DisasterTypeGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.DisasterTypeFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('DisasterType', `${endpoint}/disasterType/findMany`, args, options, fetch);
}

export function useInfiniteFindManyDisasterType<TArgs extends Prisma.DisasterTypeFindManyArgs, TQueryFnData = Array<Prisma.DisasterTypeGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.DisasterTypeFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('DisasterType', `${endpoint}/disasterType/findMany`, args, options, fetch);
}

export function useSuspenseFindManyDisasterType<TArgs extends Prisma.DisasterTypeFindManyArgs, TQueryFnData = Array<Prisma.DisasterTypeGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.DisasterTypeFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('DisasterType', `${endpoint}/disasterType/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyDisasterType<TArgs extends Prisma.DisasterTypeFindManyArgs, TQueryFnData = Array<Prisma.DisasterTypeGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.DisasterTypeFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('DisasterType', `${endpoint}/disasterType/findMany`, args, options, fetch);
}

export function useFindUniqueDisasterType<TArgs extends Prisma.DisasterTypeFindUniqueArgs, TQueryFnData = Prisma.DisasterTypeGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.DisasterTypeFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('DisasterType', `${endpoint}/disasterType/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueDisasterType<TArgs extends Prisma.DisasterTypeFindUniqueArgs, TQueryFnData = Prisma.DisasterTypeGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.DisasterTypeFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('DisasterType', `${endpoint}/disasterType/findUnique`, args, options, fetch);
}

export function useFindFirstDisasterType<TArgs extends Prisma.DisasterTypeFindFirstArgs, TQueryFnData = Prisma.DisasterTypeGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.DisasterTypeFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('DisasterType', `${endpoint}/disasterType/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstDisasterType<TArgs extends Prisma.DisasterTypeFindFirstArgs, TQueryFnData = Prisma.DisasterTypeGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.DisasterTypeFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('DisasterType', `${endpoint}/disasterType/findFirst`, args, options, fetch);
}

export function useUpdateDisasterType(options?: Omit<(UseMutationOptions<(DisasterType | undefined), DefaultError, Prisma.DisasterTypeUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.DisasterTypeUpdateArgs, DefaultError, DisasterType, true>('DisasterType', 'PUT', `${endpoint}/disasterType/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.DisasterTypeUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.DisasterTypeUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, DisasterType, Prisma.DisasterTypeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.DisasterTypeUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, DisasterType, Prisma.DisasterTypeGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyDisasterType(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.DisasterTypeUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.DisasterTypeUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('DisasterType', 'PUT', `${endpoint}/disasterType/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.DisasterTypeUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.DisasterTypeUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.DisasterTypeUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertDisasterType(options?: Omit<(UseMutationOptions<(DisasterType | undefined), DefaultError, Prisma.DisasterTypeUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.DisasterTypeUpsertArgs, DefaultError, DisasterType, true>('DisasterType', 'POST', `${endpoint}/disasterType/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.DisasterTypeUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.DisasterTypeUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, DisasterType, Prisma.DisasterTypeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.DisasterTypeUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, DisasterType, Prisma.DisasterTypeGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteDisasterType(options?: Omit<(UseMutationOptions<(DisasterType | undefined), DefaultError, Prisma.DisasterTypeDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.DisasterTypeDeleteArgs, DefaultError, DisasterType, true>('DisasterType', 'DELETE', `${endpoint}/disasterType/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.DisasterTypeDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.DisasterTypeDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, DisasterType, Prisma.DisasterTypeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.DisasterTypeDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, DisasterType, Prisma.DisasterTypeGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyDisasterType(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.DisasterTypeDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.DisasterTypeDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('DisasterType', 'DELETE', `${endpoint}/disasterType/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.DisasterTypeDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.DisasterTypeDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.DisasterTypeDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateDisasterType<TArgs extends Prisma.DisasterTypeAggregateArgs, TQueryFnData = Prisma.GetDisasterTypeAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.DisasterTypeAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('DisasterType', `${endpoint}/disasterType/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateDisasterType<TArgs extends Prisma.DisasterTypeAggregateArgs, TQueryFnData = Prisma.GetDisasterTypeAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.DisasterTypeAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('DisasterType', `${endpoint}/disasterType/aggregate`, args, options, fetch);
}

export function useGroupByDisasterType<TArgs extends Prisma.DisasterTypeGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.DisasterTypeGroupByArgs['orderBy'] } : { orderBy?: Prisma.DisasterTypeGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.DisasterTypeGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.DisasterTypeGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.DisasterTypeGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.DisasterTypeGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.DisasterTypeGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('DisasterType', `${endpoint}/disasterType/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByDisasterType<TArgs extends Prisma.DisasterTypeGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.DisasterTypeGroupByArgs['orderBy'] } : { orderBy?: Prisma.DisasterTypeGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.DisasterTypeGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.DisasterTypeGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.DisasterTypeGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.DisasterTypeGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.DisasterTypeGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('DisasterType', `${endpoint}/disasterType/groupBy`, args, options, fetch);
}

export function useCountDisasterType<TArgs extends Prisma.DisasterTypeCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.DisasterTypeCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.DisasterTypeCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('DisasterType', `${endpoint}/disasterType/count`, args, options, fetch);
}

export function useSuspenseCountDisasterType<TArgs extends Prisma.DisasterTypeCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.DisasterTypeCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.DisasterTypeCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('DisasterType', `${endpoint}/disasterType/count`, args, options, fetch);
}

export function useCheckDisasterType<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; description?: string; name?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('DisasterType', `${endpoint}/disasterType/check`, args, options, fetch);
}
