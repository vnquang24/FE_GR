/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, RescueTypeOnDisaster } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateRescueTypeOnDisaster(options?: Omit<(UseMutationOptions<(RescueTypeOnDisaster | undefined), DefaultError, Prisma.RescueTypeOnDisasterCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RescueTypeOnDisasterCreateArgs, DefaultError, RescueTypeOnDisaster, true>('RescueTypeOnDisaster', 'POST', `${endpoint}/rescueTypeOnDisaster/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RescueTypeOnDisasterCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.RescueTypeOnDisasterCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, RescueTypeOnDisaster, Prisma.RescueTypeOnDisasterGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.RescueTypeOnDisasterCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, RescueTypeOnDisaster, Prisma.RescueTypeOnDisasterGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyRescueTypeOnDisaster(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.RescueTypeOnDisasterCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RescueTypeOnDisasterCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('RescueTypeOnDisaster', 'POST', `${endpoint}/rescueTypeOnDisaster/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RescueTypeOnDisasterCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.RescueTypeOnDisasterCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.RescueTypeOnDisasterCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyRescueTypeOnDisaster<TArgs extends Prisma.RescueTypeOnDisasterFindManyArgs, TQueryFnData = Array<Prisma.RescueTypeOnDisasterGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.RescueTypeOnDisasterFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('RescueTypeOnDisaster', `${endpoint}/rescueTypeOnDisaster/findMany`, args, options, fetch);
}

export function useInfiniteFindManyRescueTypeOnDisaster<TArgs extends Prisma.RescueTypeOnDisasterFindManyArgs, TQueryFnData = Array<Prisma.RescueTypeOnDisasterGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.RescueTypeOnDisasterFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('RescueTypeOnDisaster', `${endpoint}/rescueTypeOnDisaster/findMany`, args, options, fetch);
}

export function useSuspenseFindManyRescueTypeOnDisaster<TArgs extends Prisma.RescueTypeOnDisasterFindManyArgs, TQueryFnData = Array<Prisma.RescueTypeOnDisasterGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.RescueTypeOnDisasterFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('RescueTypeOnDisaster', `${endpoint}/rescueTypeOnDisaster/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyRescueTypeOnDisaster<TArgs extends Prisma.RescueTypeOnDisasterFindManyArgs, TQueryFnData = Array<Prisma.RescueTypeOnDisasterGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.RescueTypeOnDisasterFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('RescueTypeOnDisaster', `${endpoint}/rescueTypeOnDisaster/findMany`, args, options, fetch);
}

export function useFindUniqueRescueTypeOnDisaster<TArgs extends Prisma.RescueTypeOnDisasterFindUniqueArgs, TQueryFnData = Prisma.RescueTypeOnDisasterGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.RescueTypeOnDisasterFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('RescueTypeOnDisaster', `${endpoint}/rescueTypeOnDisaster/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueRescueTypeOnDisaster<TArgs extends Prisma.RescueTypeOnDisasterFindUniqueArgs, TQueryFnData = Prisma.RescueTypeOnDisasterGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.RescueTypeOnDisasterFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('RescueTypeOnDisaster', `${endpoint}/rescueTypeOnDisaster/findUnique`, args, options, fetch);
}

export function useFindFirstRescueTypeOnDisaster<TArgs extends Prisma.RescueTypeOnDisasterFindFirstArgs, TQueryFnData = Prisma.RescueTypeOnDisasterGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.RescueTypeOnDisasterFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('RescueTypeOnDisaster', `${endpoint}/rescueTypeOnDisaster/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstRescueTypeOnDisaster<TArgs extends Prisma.RescueTypeOnDisasterFindFirstArgs, TQueryFnData = Prisma.RescueTypeOnDisasterGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.RescueTypeOnDisasterFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('RescueTypeOnDisaster', `${endpoint}/rescueTypeOnDisaster/findFirst`, args, options, fetch);
}

export function useUpdateRescueTypeOnDisaster(options?: Omit<(UseMutationOptions<(RescueTypeOnDisaster | undefined), DefaultError, Prisma.RescueTypeOnDisasterUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RescueTypeOnDisasterUpdateArgs, DefaultError, RescueTypeOnDisaster, true>('RescueTypeOnDisaster', 'PUT', `${endpoint}/rescueTypeOnDisaster/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RescueTypeOnDisasterUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.RescueTypeOnDisasterUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, RescueTypeOnDisaster, Prisma.RescueTypeOnDisasterGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.RescueTypeOnDisasterUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, RescueTypeOnDisaster, Prisma.RescueTypeOnDisasterGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyRescueTypeOnDisaster(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.RescueTypeOnDisasterUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RescueTypeOnDisasterUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('RescueTypeOnDisaster', 'PUT', `${endpoint}/rescueTypeOnDisaster/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RescueTypeOnDisasterUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.RescueTypeOnDisasterUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.RescueTypeOnDisasterUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertRescueTypeOnDisaster(options?: Omit<(UseMutationOptions<(RescueTypeOnDisaster | undefined), DefaultError, Prisma.RescueTypeOnDisasterUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RescueTypeOnDisasterUpsertArgs, DefaultError, RescueTypeOnDisaster, true>('RescueTypeOnDisaster', 'POST', `${endpoint}/rescueTypeOnDisaster/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RescueTypeOnDisasterUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.RescueTypeOnDisasterUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, RescueTypeOnDisaster, Prisma.RescueTypeOnDisasterGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.RescueTypeOnDisasterUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, RescueTypeOnDisaster, Prisma.RescueTypeOnDisasterGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteRescueTypeOnDisaster(options?: Omit<(UseMutationOptions<(RescueTypeOnDisaster | undefined), DefaultError, Prisma.RescueTypeOnDisasterDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RescueTypeOnDisasterDeleteArgs, DefaultError, RescueTypeOnDisaster, true>('RescueTypeOnDisaster', 'DELETE', `${endpoint}/rescueTypeOnDisaster/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RescueTypeOnDisasterDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.RescueTypeOnDisasterDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, RescueTypeOnDisaster, Prisma.RescueTypeOnDisasterGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.RescueTypeOnDisasterDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, RescueTypeOnDisaster, Prisma.RescueTypeOnDisasterGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyRescueTypeOnDisaster(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.RescueTypeOnDisasterDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RescueTypeOnDisasterDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('RescueTypeOnDisaster', 'DELETE', `${endpoint}/rescueTypeOnDisaster/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RescueTypeOnDisasterDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.RescueTypeOnDisasterDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.RescueTypeOnDisasterDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateRescueTypeOnDisaster<TArgs extends Prisma.RescueTypeOnDisasterAggregateArgs, TQueryFnData = Prisma.GetRescueTypeOnDisasterAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.RescueTypeOnDisasterAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('RescueTypeOnDisaster', `${endpoint}/rescueTypeOnDisaster/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateRescueTypeOnDisaster<TArgs extends Prisma.RescueTypeOnDisasterAggregateArgs, TQueryFnData = Prisma.GetRescueTypeOnDisasterAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.RescueTypeOnDisasterAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('RescueTypeOnDisaster', `${endpoint}/rescueTypeOnDisaster/aggregate`, args, options, fetch);
}

export function useGroupByRescueTypeOnDisaster<TArgs extends Prisma.RescueTypeOnDisasterGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.RescueTypeOnDisasterGroupByArgs['orderBy'] } : { orderBy?: Prisma.RescueTypeOnDisasterGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.RescueTypeOnDisasterGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.RescueTypeOnDisasterGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.RescueTypeOnDisasterGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.RescueTypeOnDisasterGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.RescueTypeOnDisasterGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('RescueTypeOnDisaster', `${endpoint}/rescueTypeOnDisaster/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByRescueTypeOnDisaster<TArgs extends Prisma.RescueTypeOnDisasterGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.RescueTypeOnDisasterGroupByArgs['orderBy'] } : { orderBy?: Prisma.RescueTypeOnDisasterGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.RescueTypeOnDisasterGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.RescueTypeOnDisasterGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.RescueTypeOnDisasterGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.RescueTypeOnDisasterGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.RescueTypeOnDisasterGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('RescueTypeOnDisaster', `${endpoint}/rescueTypeOnDisaster/groupBy`, args, options, fetch);
}

export function useCountRescueTypeOnDisaster<TArgs extends Prisma.RescueTypeOnDisasterCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.RescueTypeOnDisasterCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.RescueTypeOnDisasterCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('RescueTypeOnDisaster', `${endpoint}/rescueTypeOnDisaster/count`, args, options, fetch);
}

export function useSuspenseCountRescueTypeOnDisaster<TArgs extends Prisma.RescueTypeOnDisasterCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.RescueTypeOnDisasterCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.RescueTypeOnDisasterCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('RescueTypeOnDisaster', `${endpoint}/rescueTypeOnDisaster/count`, args, options, fetch);
}

export function useCheckRescueTypeOnDisaster<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; description?: string; disasterId?: string; rescueTypeId?: string; unitId?: string; source?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('RescueTypeOnDisaster', `${endpoint}/rescueTypeOnDisaster/check`, args, options, fetch);
}
